###########################################################
### Unofficial style guide for NarmVM opcode unit tests ###
###########################################################

NOTE: This is an incomplete WIP document created mostly to record formatting decisions made as development goes. Changes and additions are allowed and welcome, as long as all files are modified to comply. 



    - Files:          
There should be one file per opcode, named "test_[base op mnemonic].rs". When it makes sense exceptions are allowed for "variant" opcodes, e.g. add with and without -s suffix, or "pseudo ops", distinct assembly mnemonics that compile to a special case of a base opcode. 

    - Directory structure: 
Not formalized as of now, but at some point it will probably be needed for easy overview. 

    - Functions: 
Each distinct test case should have its own function named "test_[op mnemonic]_[case shorthand]". If the same/very similar case is tested for several opcodes it's much preferred to use the same case shorthand for easy overview. 

    - Code structure:       
Not formalized as of now, go for best effort emulation of existing files. See e.g. "test_and.rs". 

    - Number formatting:
Constants should normally be written in hexadecimal, with an even number of characters (e.g. 0x01 and 0x0100, not 0x1 and 0x100), and in Rust sections an underscore should separate every 4 characters (0x1234_5678). A very important note here is that while it's possible in some cases to use underscores to format Assembly constants this is an unintended behavior and shouldn't be used. 

    - General Rust code style: 
The code should be formatted using the built-in "rustfmt" command (run "rustfmt *.rs" in this directory). At some point configurations should probably be made, but for now default is acceptable. 